// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ExtractInPost component should render a cognitive bias extract in a post 1`] = `
<span
  className="extract-in-message"
  id="112233"
  style={
    Object {
      "backgroundColor": "#000000",
      "color": "#FFFFFF",
    }
  }
>
  text
</span>
`;

exports[`ExtractInPost component should render an extract in a post (submitted by robot) 1`] = `
<span
  className="extract-in-message"
  id="889900"
  style={
    Object {
      "backgroundColor": "#FF9BB4",
      "color": null,
    }
  }
>
  text
</span>
`;

exports[`ExtractInPost component should render an extract in a post 1`] = `
<span
  className="extract-in-message"
  id="112233"
  style={
    Object {
      "backgroundColor": "#00B6FF",
      "color": null,
    }
  }
>
  text
</span>
`;

exports[`Html component should render a html body with extracts 1`] = `
<div>
  <div
    id="message-body-local:Content/3059"
  >
    You can't 
    <span
      id="message-body-local:Content/1010"
    >
      <ExtractInPost
        extractedByMachine={true}
        id="223344"
        nature="Enum.actionable_solution"
        state="PUBLISHED"
      >
        index
      </ExtractInPost>
       
      <React.Fragment>
        <a
          className="linkified"
          href="url"
          target="_blank"
        >
          <ExtractInPost
            extractedByMachine={false}
            id="778899"
            nature="Enum.concept"
            state="PUBLISHED"
          >
            the port
          </ExtractInPost>
        </a>
      </React.Fragment>
       without programming
    </span>
  </div>
  <div
    id="message-body-local:Content/2020"
  >
    <ExtractInPost
      extractedByMachine={true}
      id="112233"
      nature="Enum.actionable_solution"
      state="SUBMITTED"
    >
      wireless
    </ExtractInPost>
     HTTP program
  </div>
  <Embed
    defaultEmbed={
      <iframe
        src="iframe-src"
        title="post-embed"
      />
    }
    url="iframe-src"
  />
  <React.Fragment>
    <URLMetadataLoader
      afterLoad={[MockFunction]}
      url="https://github.com/"
    />
    <a
      className="linkified"
      href="https://github.com/"
      target="_blank"
    >
      https://github.com/
    </a>
  </React.Fragment>
  <modalImage
    className="atomic-image"
    src="http://lorempixel.com/400/200/"
  />
</div>
`;

exports[`Html component should render a html body without extracts 1`] = `
<div>
  <div
    id="message-body-local:Content/3059"
  >
    You can't 
    <span
      id="message-body-local:Content/1010"
    >
      index
       
      <React.Fragment>
        <a
          className="linkified"
          href="url"
          target="_blank"
        >
          the port
        </a>
      </React.Fragment>
       without programming
    </span>
  </div>
  <div
    id="message-body-local:Content/2020"
  >
    wireless
     HTTP program
  </div>
  <Embed
    defaultEmbed={
      <iframe
        src="iframe-src"
        title="post-embed"
      />
    }
    url="iframe-src"
  />
  <React.Fragment>
    <URLMetadataLoader
      afterLoad={[MockFunction]}
      url="https://github.com/"
    />
    <a
      className="linkified"
      href="https://github.com/"
      target="_blank"
    >
      https://github.com/
    </a>
  </React.Fragment>
  <modalImage
    className="atomic-image"
    src="http://lorempixel.com/400/200/"
  />
</div>
`;

exports[`PostBody component should render a post body 1`] = `
<div
  className="post-body post-body--is-harvestable"
>
  <Apollo(Connect(Component))
    afterLoad={[Function]}
    contentLocale="fr"
    id="XYZ333"
    lang="fr"
    onTranslate={[Function]}
    originalLocale="en"
    translate={true}
  />
  <h3
    className="post-body-title dark-title-3"
  >
    <span>
      open-source Associate
    </span>
  </h3>
  <div
    className="post-body-content body"
  >
    <Html
      contentLocale="fr"
      dbId={124}
      divRef={[MockFunction]}
      extracts={Array []}
      rawHtml="<p>You can't index the port without programming the wireless HTTP program!</p>"
      replacementComponents={
        Object {
          "a": [Function],
          "annotation": [Function],
          "iframe": [Function],
          "img": [Function],
        }
      }
    />
  </div>
</div>
`;
